class Transaction : public node::ObjectWrap, public Query {
public:
	
	// Provides public access to the constructor.
	static v8::MaybeLocal<v8::Object> New(v8::Isolate* isolate, v8::Local<v8::Object> database, v8::Local<v8::Array> sources) {
		v8::Local<v8::Function> c = v8::Local<v8::Function>::New(isolate, constructor);
		v8::Local<v8::Value> args[2] = { database, sources };
		constructing_privileges = true;
		v8::MaybeLocal<v8::Object> maybe_transaction = c->NewInstance(OnlyContext, 2, args);
		constructing_privileges = false;
		return maybe_transaction;
	}
	
	// Returns the Transaction's bind map (creates it upon first execution).
	BindMap* GetBindMap(v8::Isolate* isolate) {
		if (has_bind_map) return BindMapPointer();
		BindMap* bind_map = BindMapPointer();
		for (int h=0; h<handle_count; ++h) {
			sqlite3_stmt* handle = handles[h];
			int param_count = sqlite3_bind_parameter_count(handle);
			for (int i=1; i<=param_count; ++i) {
				const char* name = sqlite3_bind_parameter_name(handle, i);
				if (name != NULL) bind_map->Add(isolate, name + 1, i, h);
			}
		}
		has_bind_map = true;
		return bind_map;
	}
	
	// This should only be used by Database::CloseHandles() and ~Transaction().
	void CloseHandles() {
		if (alive) {
			alive = false;
			for (int i=0; i<handle_count; ++i) sqlite3_finalize(handles[i]);
			delete[] handles;
		}
	}
	
	~Transaction() {
		if (alive) db->RemoveTransaction(this);
		CloseHandles();
	}
	
private:
	
	explicit Transaction(Database* _db, TransactionHandles* _handles) : node::ObjectWrap(), Query(next_id++),
		db(_db),
		handles(_handles->handles),
		handle_count(_handles->handle_count),
		alive(true),
		bound(false),
		has_bind_map(false),
		safe_ints(_db->GetState()->safe_ints) {
		assert(db != NULL);
		assert(handles != NULL);
		assert(handle_count > 0);
		assert(handle_count <= BindMap::MAX_TRANSACTION_LENGTH);
		assert(db->GetState()->open);
		assert(!db->GetState()->busy);
		db->AddTransaction(this);
	}
	
	REGISTER(Init) {
		v8::Local<v8::FunctionTemplate> t = v8::FunctionTemplate::New(isolate, JS_new);
		t->InstanceTemplate()->SetInternalFieldCount(1);
		t->SetClassName(StringFromUtf8(isolate, "Transaction", -1));
		
		NODE_SET_PROTOTYPE_METHOD(t, "run", JS_run);
		NODE_SET_PROTOTYPE_METHOD(t, "bind", JS_bind);
		NODE_SET_PROTOTYPE_METHOD(t, "safeIntegers", JS_safeIntegers);
		
		constructor.Reset(isolate, t->GetFunction(OnlyContext).ToLocalChecked());
		next_id = 0;
		constructing_privileges = false;
	}
	
	NODE_METHOD(JS_new) {
		if (!constructing_privileges) {
			return ThrowTypeError("Transactions can only be constructed by the db.transaction() method");
		}
		assert(info.IsConstructCall());
		REQUIRE_ARGUMENT_OBJECT(first, v8::Local<v8::Object> database);
		REQUIRE_ARGUMENT_ARRAY(second, v8::Local<v8::Array> sources);
		Database* db = Unwrap<Database>(database);
		REQUIRE_DATABASE_OPEN(db->GetState());
		REQUIRE_DATABASE_NOT_BUSY(db->GetState());
		uint32_t length = sources->Length();
		if (length == 0) {
			return ThrowRangeError("No SQL statements were provided");
		}
		if (length > BindMap::MAX_TRANSACTION_LENGTH) {
			return ThrowRangeError("Too many SQL statements were provided");
		}
		
		UseIsolateAndContext;
		SQLString sql(length);
		for (uint32_t i=0; i<length; ++i) {
			v8::MaybeLocal<v8::Value> maybeValue = sources->Get(ctx, i);
			if (maybeValue.IsEmpty()) {
				return;
			}
			v8::Local<v8::Value> value = maybeValue.ToLocalChecked();
			if (!value->IsString()) {
				return ThrowTypeError("Expected each item in the given array to be a string");
			}
			sql.AddStatement(v8::Local<v8::String>::Cast(value));
		}
		
		TransactionHandles handles(static_cast<int>(length));
		sqlite3* db_handle = db->GetHandle();
		for (uint32_t i=0; i<length; ++i) {
			const void* tail;
			sqlite3_stmt* handle;
			const uint16_t* source = **sql.GetStatement(i);
			int source_length = sql.GetStatement(i)->length();
			
			if (sqlite3_prepare16_v2(db_handle, source, source_length * sizeof(uint16_t) + 1, &handle, &tail) != SQLITE_OK) {
				return db->ThrowDatabaseError();
			}
			if (handle == NULL) {
				return ThrowRangeError("One of the SQL strings contains no statements");
			}
			handles.Add(handle);
			if (tail != (const void*)(source + source_length)) {
				return ThrowRangeError("One of the SQL strings contains more than one statement");
			}
			if (sqlite3_stmt_readonly(handle)) {
				return ThrowTypeError("Transaction objects cannot contain read-only statements");
			}
		}
		
		handles.success = true;
		Transaction* trans = new Transaction(db, &handles);
		trans->Wrap(info.This());
		SetFrozen(isolate, ctx, info.This(), CS::source, sql.Concat(isolate));
		SetFrozen(isolate, ctx, info.This(), CS::database, database);
		
		info.GetReturnValue().Set(info.This());
	}
	
	NODE_METHOD(JS_run) {
		TRANSACTION_START();
		Database::TransactionController controller = db->GetTransactionController();
		sqlite3* db_handle = db->GetHandle();
		double changes = 0;
		
		auto rollback = [](sqlite3* db_handle, sqlite3_stmt* handle) {
			if (!sqlite3_get_autocommit(db_handle)) {
				sqlite3_step(handle);
				sqlite3_reset(handle);
			}
		};
		
		sqlite3_step(controller.begin);
		if (sqlite3_reset(controller.begin) != SQLITE_OK) {
			TRANSACTION_THROW(((void)0));
		}
		
		for (int i=0; i<handle_count; ++i) {
			sqlite3_stmt* handle = handles[i];
			int total_changes_before = sqlite3_total_changes(db_handle);
			sqlite3_step(handle);
			if (sqlite3_reset(handle) != SQLITE_OK) {
				TRANSACTION_THROW(rollback(db_handle, controller.rollback));
			}
			if (sqlite3_total_changes(db_handle) != total_changes_before) {
				changes += static_cast<double>(sqlite3_changes(db_handle));
			}
		}
		
		sqlite3_step(controller.commit);
		if (sqlite3_reset(controller.commit) != SQLITE_OK) {
			TRANSACTION_THROW(rollback(db_handle, controller.rollback));
		}
		
		UseIsolateAndContext;
		sqlite3_int64 id = sqlite3_last_insert_rowid(db_handle);
		v8::Local<v8::Object> result = v8::Object::New(isolate);
		result->Set(ctx, CS::Get(isolate, CS::changes), v8::Number::New(isolate, changes)).FromJust();
		result->Set(ctx, CS::Get(isolate, CS::lastInsertROWID), Integer::New(isolate, id, trans->safe_ints)).FromJust();
		TRANSACTION_RETURN(result);
	}
	
	NODE_METHOD(JS_bind) {
		Transaction* trans = Unwrap<Transaction>(info.This());
		if (trans->bound) return ThrowTypeError("The bind() method can only be invoked once per transaction object");
		REQUIRE_DATABASE_OPEN(trans->db->GetState());
		REQUIRE_DATABASE_NOT_BUSY(trans->db->GetState());
		TRANSACTION_BIND(trans->handles, trans->handle_count);
		trans->bound = true;
		info.GetReturnValue().Set(info.This());
	}
	
	NODE_METHOD(JS_safeIntegers) {
		Transaction* trans = Unwrap<Transaction>(info.This());
		REQUIRE_DATABASE_NOT_BUSY(trans->db->GetState());
		if (info.Length() == 0) trans->safe_ints = true;
		else { REQUIRE_ARGUMENT_BOOLEAN(first, trans->safe_ints); }
		info.GetReturnValue().Set(info.This());
	}
	
	static v8::Persistent<v8::Function> constructor;
	static sqlite3_uint64 next_id;
	static bool constructing_privileges;
	
	Database* const db;
	sqlite3_stmt** const handles;
	const int handle_count;
	bool alive;
	bool bound;
	bool has_bind_map;
	bool safe_ints;
};
