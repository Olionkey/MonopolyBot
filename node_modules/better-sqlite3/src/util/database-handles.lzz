// A helper class for creating the handles necessary for constructing a
// Database object. If an error occurs, ownership of those handles is not
// relinquished, so they can be safely destroyed when this object goes out of
// scope.
class DatabaseHandles { friend class Database;
	
	explicit DatabaseHandles(v8::Local<v8::String> filename, bool readonly, bool must_exist) {
		db_handle = NULL;
		begin = NULL;
		commit = NULL;
		rollback = NULL;
		success = true;
		
		v8::String::Utf8Value utf8(filename);
		int mask = readonly ? SQLITE_OPEN_READONLY
			: must_exist ? SQLITE_OPEN_READWRITE
			: (SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE);
		
		if (sqlite3_open_v2(*utf8, &db_handle, mask, NULL) != SQLITE_OK) {
			success = false;
		} else if (sqlite3_prepare_v2(db_handle, "BEGIN TRANSACTION;", -1, &begin, NULL) != SQLITE_OK) {
			success = false;
		} else if (sqlite3_prepare_v2(db_handle, "COMMIT TRANSACTION;", -1, &commit, NULL) != SQLITE_OK) {
			success = false;
		} else if (sqlite3_prepare_v2(db_handle, "ROLLBACK TRANSACTION;", -1, &rollback, NULL) != SQLITE_OK) {
			success = false;
		}
	}
	
	~DatabaseHandles() {
		if (success == false) {
			sqlite3_finalize(begin);
			sqlite3_finalize(commit);
			sqlite3_finalize(rollback);
			int status = sqlite3_close(db_handle);
			assert(status == SQLITE_OK); ((void)status);
		}
	}
	
	sqlite3* db_handle;
	sqlite3_stmt* begin;
	sqlite3_stmt* commit;
	sqlite3_stmt* rollback;
	bool success;
};
