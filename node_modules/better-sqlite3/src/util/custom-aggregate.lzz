class CustomAggregate {
public:
	
	struct Entry {
		v8::Local<v8::Value> value;
		bool done;
		bool threw;
	};
	
	// Attempts to begin the generator function, switching to an active state.
	// If a JavaScript error is thrown, this object is destroyed instead.
	void Activate(v8::Isolate* isolate, CustomFunction* cf) {
		assert(state == uninitialized);
		NewHandleScope;
		UseContext;
		v8::Local<v8::Object> _generator = v8::Local<v8::Object>::Cast(v8::Local<v8::Function>::New(isolate, cf->fn)->Call(ctx, v8::Undefined(isolate), 0, NULL).ToLocalChecked());
		v8::Local<v8::Function> _next = v8::Local<v8::Function>::Cast(_generator->Get(ctx, CS::Get(isolate, CS::next)).ToLocalChecked());
		generator.Reset(isolate, _generator);
		next.Reset(isolate, _next);
		state = active;
		
		Entry entry = ProgressGenerator(isolate, ctx);
		if (entry.threw) return Destroy();
		if (entry.done || !entry.value->IsFunction()) {
			ThrowTypeError(CONCAT("Custom aggregate ", cf->name, "() did not yield a function").c_str());
			return Destroy();
		}
		v8::Local<v8::Function> _fn = v8::Local<v8::Function>::Cast(entry.value);
		
		int argc = cf->argc;
		if (argc >= 0) {
			v8::MaybeLocal<v8::Value> maybe_length = _fn->Get(ctx, CS::Get(isolate, CS::length));
			if (maybe_length.IsEmpty()) return Destroy();
			
			v8::Local<v8::Value> lengthValue = maybe_length.ToLocalChecked();
			if (!lengthValue->IsInt32() || argc != v8::Local<v8::Int32>::Cast(lengthValue)->Value()) {
				ThrowTypeError(CONCAT("Custom aggregate ", cf->name, "() has an inconsistent function.length").c_str());
				return Destroy();
			}
		}
		fn.Reset(isolate, _fn);
	}
	
	inline void Destroy() {
		assert(state == active);
		generator.Reset();
		next.Reset();
		fn.Reset();
		state = destroyed;
	}
	
	inline bool IsUninitialized() { return state == uninitialized; }
	inline bool IsActive() { return state == active; }
	inline v8::Local<v8::Function> GetFn(v8::Isolate* isolate) {
		return v8::Local<v8::Function>::New(isolate, fn);
	}
	
	// Gets the next yield/return value from the generator and returns it along
	// with other information about the action.
	Entry ProgressGenerator(v8::Isolate* isolate, v8::Local<v8::Context> ctx) {
		assert(state == active);
		v8::MaybeLocal<v8::Value> maybe_entry = v8::Local<v8::Function>::New(isolate, next)->Call(ctx, v8::Local<v8::Object>::New(isolate, generator), 0, NULL);
		if (maybe_entry.IsEmpty()) return { v8::Local<v8::Value>(), true, true };
		v8::Local<v8::Object> entry = v8::Local<v8::Object>::Cast(maybe_entry.ToLocalChecked());
		return {
			entry->Get(ctx, CS::Get(isolate, CS::value)).ToLocalChecked(),
			entry->Get(ctx, CS::Get(isolate, CS::done)).ToLocalChecked()->BooleanValue(),
			false
		};
	}
	
private:
	enum State { uninitialized = 0, active = 1, destroyed = 2 };
	v8::Persistent<v8::Object> generator;
	v8::Persistent<v8::Function> next;
	v8::Persistent<v8::Function> fn;
	State state;
};
