// This class represents one or more SQL statement strings in sequence.
// It also provides the ability to efficiently concatenate those statements
// (even if some statements were missing a trailing semicolon).
class SQLString {
public:
	
	explicit SQLString(uint32_t capacity) : strings(ALLOC_ARRAY<StatementString>(capacity)),
		total_character_count(0), count(0) {}
	
	~SQLString() {
		while (count) strings[--count].~StatementString();
		FREE_ARRAY(strings);
	}
	
	inline void AddStatement(v8::Local<v8::String> source) {
		StatementString* string = new (strings + count++) StatementString(source);
		total_character_count += string->value.length();
		if (string->missing_semicolon) total_character_count += 1;
	}
	
	inline const v8::String::Value* GetStatement(uint32_t index) {
		return &strings[index].value;
	}
	
	v8::Local<v8::String> Concat(v8::Isolate* isolate) {
		if (!count) return v8::String::Empty(isolate);
		size_t offset = 0;
		size_t concatenated_character_count = total_character_count + count - 1;
		uint16_t* buffer = new uint16_t[concatenated_character_count];
		for (StatementString* string = strings, * end = strings + count; string != end; ++string) {
			size_t string_length = string->value.length();
			if (string != strings) buffer[offset++] = 0xa;
			memcpy(buffer + offset, *(string->value), string_length * sizeof(uint16_t));
			offset += string_length;
			if (string->missing_semicolon) buffer[offset++] = 0x3b;
		}
		v8::Local<v8::String> result = StringFromUtf16(isolate, buffer, concatenated_character_count);
		delete[] buffer;
		return result;
	}
	
private:
	class StatementString { friend class SQLString;
		explicit StatementString(v8::Local<v8::String> string) : value(string),
			missing_semicolon(value.length() < 1 || (*value)[value.length() - 1] != 0x3b) {}
		const v8::String::Value value;
		const bool missing_semicolon;
	};
	
	StatementString* const strings;
	size_t total_character_count;
	uint32_t count;
};
