class CustomFunction {
friend class CustomAggregate;
public:
	
	explicit CustomFunction(v8::Local<v8::Function> _fn, v8::Isolate* _isolate, Database* _db, const char* _name, int _argc, bool _safe_ints)
		: fn(_isolate, _fn), isolate(_isolate), db(_db), name(CopyString(_name)), argc(_argc), safe_ints(_safe_ints) {}
	~CustomFunction() { delete[] name; }
	
	static void xDestroy(void* instance) {
		FUNCTION_START(instance);
		delete cf;
	}
	static void xFunc(sqlite3_context* ctx, int argc, sqlite3_value** argv) {
		FUNCTION_START(sqlite3_user_data(ctx));
		FUNCTION_EXECUTE(maybe_return_value, v8::Local<v8::Function>::New(isolate, cf->fn));
		Data::ResultValueFromJS(ctx, maybe_return_value.ToLocalChecked(), cf);
	}
	static void xStep(sqlite3_context* ctx, int argc, sqlite3_value** argv) {
		AGGREGATE_START();
		assert(ca->IsActive());
		
		// If a JavaScript error is thrown, we must additionally destroy the aggregate object.
		FUNCTION_EXECUTE(_, ca->GetFn(isolate), ca->Destroy());
	}
	static void xFinal(sqlite3_context* ctx) {
		AGGREGATE_START() else if (!ca->IsActive()) return;
		assert(ca->IsActive());
		
		CustomAggregate::Entry entry = ca->ProgressGenerator(isolate, OnlyContext);
		ca->Destroy();
		
		if (entry.threw) return cf->PropagateJSError(ctx);
		if (!entry.done) {
			ThrowTypeError(CONCAT("Custom aggregate ", cf->name, "() should only yield once").c_str());
			return cf->PropagateJSError(ctx);
		}
		Data::ResultValueFromJS(ctx, entry.value, cf);
	}
	
	void ThrowResultValueError(sqlite3_context* ctx) {
		ThrowTypeError(CONCAT("Custom function ", name, "() returned an invalid value").c_str());
		PropagateJSError(ctx);
	}
	
private:
	void PropagateJSError(sqlite3_context* ctx) {
		assert(db->GetState()->was_js_error == false);
		db->GetState()->was_js_error = true;
		sqlite3_result_error(ctx, "", 0);
	}
	
	static const char* CopyString(const char* source) {
		size_t bytes = strlen(source) + 1;
		char* dest = new char[bytes];
		memcpy(dest, source, bytes);
		return dest;
	}
	
	const CopyablePersistent<v8::Function> fn;
	v8::Isolate* const isolate;
	Database* const db;
	const char* const name;
	const int argc;
	const bool safe_ints;
};
